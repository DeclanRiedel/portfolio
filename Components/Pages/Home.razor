@page "/"
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<img src="images/background.png" class="background-image" alt="Background" />

<div class="nav-links">
    <MudStack>
        <MudButton Class="custom-nav-button" OnClick="@(() => ToggleContent("Skills"))">
            <span class="button-text">Skills</span>
            <MudIcon Icon="@(activeContent == "Skills" ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.ArrowForward)" />
        </MudButton>
        <MudButton Class="custom-nav-button" OnClick="@(() => ToggleContent("Projects"))">
            <span class="button-text">Projects</span>
            <MudIcon Icon="@(activeContent == "Projects" ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.ArrowForward)" />
        </MudButton>
        <MudButton Class="custom-nav-button" OnClick="@(() => ToggleContent("About"))">
            <span class="button-text">About Me</span>
            <MudIcon Icon="@(activeContent == "About" ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.ArrowForward)" />
        </MudButton>
    </MudStack>
</div>

@if (!string.IsNullOrEmpty(activeContent))
{
    <div class="content-container @(isFadingOut ? "fade-out" : "")">
        <h2>@activeContent</h2>
        <p>This is some filler content for the @activeContent section.</p>
    </div>
}

<style>
    .background-image {
        position: fixed;
        right: 1%;
        top: 50%;
        transform: translateY(-50%);
        max-width: 50vw;
        max-height: 66vh;
        object-fit: contain;
        object-position: right center;
        z-index: 0;
    }

    .nav-links {
        position: fixed;
        left: 8%;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1;
    }

    .custom-nav-button {
        font-weight: bold;
        font-size: 2rem;
        padding: 20px 0;
        color: white;
        background-color: transparent !important;
        transition: transform 0.2s ease-out;
        justify-content: flex-start;
        width: 100%;
    }

    .custom-nav-button:hover, .custom-nav-button.active {
        transform: translateX(10px);
        background-color: transparent !important;
    }

    .custom-nav-button.active {
        color: #9c27b0;
    }

    .button-text {
        margin-right: 10px;
    }

    .content-container {
        position: fixed;
        left: calc(8% + 300px);
        top: 0;
        bottom: 0;
        width: calc(49% - (8% + 300px));
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 20px;
        overflow-y: auto;
        z-index: 2;
        display: flex;
        flex-direction: column;
        justify-content: center;
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }

    .content-container.fade-out {
        animation: fadeOut 0.3s ease-in-out;
    }
</style>

@code {
    private string activeContent = "";
    private bool isFadingOut = false;

    private async Task ToggleContent(string content)
    {
        if (activeContent == content)
        {
            isFadingOut = true;
            StateHasChanged();
            await Task.Delay(300); // Wait for fade out animation
            activeContent = "";
            isFadingOut = false;
        }
        else
        {
            activeContent = content;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addMouseMoveListener", ".background-image");
        }
    }
}